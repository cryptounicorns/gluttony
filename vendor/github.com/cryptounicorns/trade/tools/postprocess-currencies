#!/usr/bin/env python3
from json import loads as json_unmarshal, dumps as json_marshal
from argparse import ArgumentParser
from sys import stdin, stdout, stderr
from math import inf as infinity

def load(args, stream):
    for line in stream:
        if not line.strip():
            continue

        yield format(json_unmarshal(line.strip()))

def filter(args, v):
    if v["volume"] < args["min_volume"]:
        if args["verbose"]:
            stderr.write(
                "Skipping '{}' because it have low volume '{} < {}'\n".format(
                    str(v),
                    v["volume"],
                    args["min_volume"]
                )
            )
        return True

    if not v["name"].strip():
        return True

    return False

def uniq(args, l):
    seen = {}
    res = []

    for v in l:
        if v["name"] in seen:
            if args["verbose"]:
                stderr.write(
                    "Skipping '{}' because currency '{}' is already in a list\n".format(
                        str(v),
                        str(seen[v["name"]])
                    )
                )
            continue

        res.append(v)
        seen[v["name"]] = v

    return res

def format(v):
    v["name"]   = v["name"].strip()
    v["symbol"] = v["symbol"].upper()

    return v

def sort(l):
    return sorted(
        l,
        key=lambda v: v["name"]
    )

def clean(args, l):
    res = []

    for v in l:
      res.append(
          {
              "name": v["name"],
              "symbol": v["symbol"],
          }
      )

    return res

def generate(args, v):
    return json_marshal(v)

def main(args):
    stdout.write(
        generate(
            args,
            clean(
                args,
                uniq(
                    args,
                    sort(
                        [
                            v
                        for v in load(args, stdin)
                        if not filter(args, v)
                        ],
                    )
                )
            )
        ) + "\n"
    )

if __name__ == "__main__":
    p = ArgumentParser()

    p.add_argument(
        "--min-volume",
        help="Minimal volume in USD to be listed",
        default=5000
    )
    p.add_argument(
        "--verbose",
        help="Be more verbose",
        action="store_true"
    )

    main(
        p.parse_args().__dict__
    )
